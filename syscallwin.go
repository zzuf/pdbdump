// Code generated by 'go generate'; DO NOT EDIT.

package main

import (
	"syscall"
	"unsafe"

	"golang.org/x/sys/windows"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
	errERROR_EINVAL     error = syscall.EINVAL
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return errERROR_EINVAL
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)
	return e
}

var (
	modDbghelp = windows.NewLazySystemDLL("Dbghelp.dll")

	procSymCleanup          = modDbghelp.NewProc("SymCleanup")
	procSymGetTypeFromNameW = modDbghelp.NewProc("SymGetTypeFromNameW")
	procSymGetTypeInfo      = modDbghelp.NewProc("SymGetTypeInfo")
	procSymInitialize       = modDbghelp.NewProc("SymInitialize")
	procSymLoadModuleExW    = modDbghelp.NewProc("SymLoadModuleExW")
	procSymUnloadModule64   = modDbghelp.NewProc("SymUnloadModule64")
)

func SymCleanup(hProcess windows.Handle) (ret bool) {
	r0, _, _ := syscall.Syscall(procSymCleanup.Addr(), 1, uintptr(hProcess), 0, 0)
	ret = r0 != 0
	return
}

func SymGetTypeFromNameW(hProcess unsafe.Pointer, BaseOfDll uint64, Name *uint16, Symbol *SYMBOL_INFO) (ret bool) {
	r0, _, _ := syscall.Syscall6(procSymGetTypeFromNameW.Addr(), 4, uintptr(hProcess), uintptr(BaseOfDll), uintptr(unsafe.Pointer(Name)), uintptr(unsafe.Pointer(Symbol)), 0, 0)
	ret = r0 != 0
	return
}

func SymGetTypeInfo(hProcess unsafe.Pointer, ModBase uint64, TypeId uint32, GetType int32, pInfo unsafe.Pointer) (ret bool) {
	r0, _, _ := syscall.Syscall6(procSymGetTypeInfo.Addr(), 5, uintptr(hProcess), uintptr(ModBase), uintptr(TypeId), uintptr(GetType), uintptr(pInfo), 0)
	ret = r0 != 0
	return
}

func SymInitialize(hProcess windows.Handle, UserSearchPath unsafe.Pointer, fInvadeProcess bool) (ret bool) {
	var _p0 uint32
	if fInvadeProcess {
		_p0 = 1
	}
	r0, _, _ := syscall.Syscall(procSymInitialize.Addr(), 3, uintptr(hProcess), uintptr(UserSearchPath), uintptr(_p0))
	ret = r0 != 0
	return
}

func SymLoadModuleExW(hProcess unsafe.Pointer, hFile unsafe.Pointer, ImageName *uint16, ModuleName *uint16, BaseOfDll uint64, DllSize uint32, Data *MODLOAD_DATA, Flags uint32) (ret uint64) {
	r0, _, _ := syscall.Syscall9(procSymLoadModuleExW.Addr(), 8, uintptr(hProcess), uintptr(hFile), uintptr(unsafe.Pointer(ImageName)), uintptr(unsafe.Pointer(ModuleName)), uintptr(BaseOfDll), uintptr(DllSize), uintptr(unsafe.Pointer(Data)), uintptr(Flags), 0)
	ret = uint64(r0)
	return
}

func SymUnloadModule64(hProcess unsafe.Pointer, BaseOfDll uint64) (ret bool) {
	r0, _, _ := syscall.Syscall(procSymUnloadModule64.Addr(), 2, uintptr(hProcess), uintptr(BaseOfDll), 0)
	ret = r0 != 0
	return
}
